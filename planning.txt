class for players
  players have name, symbol, player player_number

class for board
  board has row, colums, number of rows, number of columns, game status

class for cell 
  cell has row, column, board




board display method
  Make dynamic to accept number of rows and columns 
 
 Make nested array 

  |something|something|something| [0,0], [0,1], [0,2]
  |something|something|something| [1,0], [1,1], [1,2]
  |something|something|something| [2,0], [2,1], [2,2]




board win condition 
  
  Should I got neighbors route? Or .uniq count? 

Potential board display 

|7|8|9| 
|4|5|6| 
|X|2|3| 

Pros: Easiest to implement, clear to see cells
Cons: Difficult to assess win/lose consitions visually

C| | | | 
B| | | |
A| | | |
  1 2 3

Pros: Cleanest approach, simliar strcuture to chess (familiar)
Cons: Would want to limit apporach to 26 (for columns)

| | | |  |7|8|9| 
| | | |  |4|5|6| 
| | | |  |1|2|3| 

Pros: Second easieset to implement and cleaner than first approach
Cons: Can be diffiuclt to use once board gets too high


testing
  board display
  cell win
  player symbols,wins, number of players


    # if 3 rows and 3 colummns
    # [nil,nil,nil]
    # [[nil,nil,nil], (0,0) (C,0) board.length = 3 65 + (board.length)3 - 1 67
    # base = C.ord
    # next is 
    # [nil,nil,nil],  (1,0) (B,0) 66
    # [nil,nil,nil]]  (2,0) (A,0) (A,1)


    [[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ]], #0,0
        [[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ]], #1,0
        [[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ]], #2,0
        [[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ]], #3,0
        [[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ]], #4,0
        [[ ],[ ],["O"],[ ],[ ],[ ],[ ],[ ]], #5,0
        [[ ],[ ],["X"],["X"],[ ],[ ],[ ],[ ]], #6,0
        [[ ],[ ],[ ],[ ],[ ],[ ],[ ],[ ]], #7,0
      ]


      board.size = number of rows 
      board[0].size - number of columns